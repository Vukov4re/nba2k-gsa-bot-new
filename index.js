import 'dotenv/config';
import {
  ActionRowBuilder, ButtonBuilder, ButtonStyle,
  ChannelType, Client, GatewayIntentBits
} from 'discord.js';

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMembers] });

// Token sicher verwenden (Whitespaces entfernen)
const TOKEN = (process.env.DISCORD_TOKEN || '').trim();

// Helper-Funktionen
async function ensureCategory(guild, name) {
  let cat = guild.channels.cache.find(c => c.type === ChannelType.GuildCategory && c.name === name);
  if (!cat) cat = await guild.channels.create({ name, type: ChannelType.GuildCategory });
  return cat;
}
async function ensureText(guild, name, parent) {
  let ch = guild.channels.cache.find(c => c.type === ChannelType.GuildText && c.name === name && c.parentId === parent.id);
  if (!ch) ch = await guild.channels.create({ name, type: ChannelType.GuildText, parent: parent.id });
  return ch;
}
async function ensureVoice(guild, name, parent) {
  let ch = guild.channels.cache.find(c => c.type === ChannelType.GuildVoice && c.name === name && c.parentId === parent.id);
  if (!ch) ch = await guild.channels.create({ name, type: ChannelType.GuildVoice, parent: parent.id });
  return ch;
}
async function ensureRole(guild, name) {
  let role = guild.roles.cache.find(r => r.name === name);
  if (!role) role = await guild.roles.create({ name });
  return role;
}
async function lockReadOnly(channel, guild) {
  const everyone = guild.roles.everyone;
  await channel.permissionOverwrites.edit(everyone, {
    SendMessages: false,
    AddReactions: false
  });
}

// Struktur erstellen
async function createStructure(guild) {
  const info   = await ensureCategory(guild, 'üì¢ Info & Regeln');
  const allg   = await ensureCategory(guild, 'üí¨ Allgemein');
  const search = await ensureCategory(guild, 'üéÆ Teammate-Suche');
  const voice  = await ensureCategory(guild, 'üîä Voice');
  const events = await ensureCategory(guild, 'üèÜ Events');

  const chRules = await ensureText(guild, 'üìú‚îÇregeln', info);
  const chNews  = await ensureText(guild, 'üì¢‚îÇank√ºndigungen', info);
  await ensureText(guild, 'üéØ‚îÇwillkommen', info);

  await ensureText(guild, 'üí¨‚îÇchat', allg);
  await ensureText(guild, 'üèÄ‚îÇnba2k-news', allg);
  await ensureText(guild, 'üì∏‚îÇbuild-galerie', allg);
  await ensureText(guild, '‚ùì‚îÇhilfe-fragen', allg);

  await ensureText(guild, 'üéÆ‚îÇps5-suche', search);
  await ensureText(guild, 'üéÆ‚îÇxbox-suche', search);
  await ensureText(guild, 'üéÆ‚îÇpc-suche', search);
  await ensureText(guild, 'üèÜ‚îÇpro-am-suche', search);
  await ensureText(guild, 'üèü‚îÇrec-park-suche', search);

  await ensureVoice(guild, 'üéô‚îÇLobby', voice);
  await ensureVoice(guild, 'üéô‚îÇRec Match', voice);
  await ensureVoice(guild, 'üéô‚îÇPro-Am Match', voice);

  await ensureText(guild, 'üìÖ‚îÇturniere', events);
  await ensureText(guild, 'üé•‚îÇhighlight-clips', events);

  await lockReadOnly(chRules, guild);
  await lockReadOnly(chNews, guild);
}

// Rollen
function buildButtonsRow(items, prefix) {
  const row = new ActionRowBuilder();
  for (const { id, label, emoji } of items) {
    row.addComponents(new ButtonBuilder()
      .setCustomId(`${prefix}:${id}`)
      .setLabel(label)
      .setStyle(ButtonStyle.Secondary)
      .setEmoji(emoji));
  }
  return row;
}
async function postRoleMessage(channel) {
  await channel.send({
    content: '**Plattform w√§hlen**:',
    components: [buildButtonsRow([
      { id: 'ps5', label: 'PS5', emoji: 'üéÆ' },
      { id: 'xbox', label: 'Xbox', emoji: 'üéÆ' },
      { id: 'pc', label: 'PC', emoji: 'üíª' }
    ], 'platform')]
  });

  await channel.send({
    content: '**Land w√§hlen**:',
    components: [buildButtonsRow([
      { id: 'de', label: 'Deutschland', emoji: 'üá©üá™' },
      { id: 'ch', label: 'Schweiz', emoji: 'üá®üá≠' },
      { id: 'at', label: '√ñsterreich', emoji: 'üá¶üáπ' }
    ], 'country')]
  });

  await channel.send({
    content: '**Build-Position w√§hlen**:',
    components: [buildButtonsRow([
      { id: 'pg', label: 'PG', emoji: 'üèÄ' },
      { id: 'sg', label: 'SG', emoji: 'üèÄ' },
      { id: 'sf', label: 'SF', emoji: 'üèÄ' },
      { id: 'pf', label: 'PF', emoji: 'üèÄ' },
      { id: 'c',  label: 'C',  emoji: 'üèÄ' }
    ], 'position')]
  });
}
async function ensureRoles(guild) {
  await ensureRole(guild, 'PS5'); await ensureRole(guild, 'Xbox'); await ensureRole(guild, 'PC');
  await ensureRole(guild, 'Deutschland'); await ensureRole(guild, 'Schweiz'); await ensureRole(guild, '√ñsterreich');
  await ensureRole(guild, 'PG'); await ensureRole(guild, 'SG'); await ensureRole(guild, 'SF'); await ensureRole(guild, 'PF'); await ensureRole(guild, 'C');
}
function mapCustomIdToRoleName(customId) {
  const [p, id] = customId.split(':');
  if (p === 'platform') return id === 'ps5' ? 'PS5' : id === 'xbox' ? 'Xbox' : id === 'pc' ? 'PC' : null;
  if (p === 'country')  return id === 'de' ? 'Deutschland' : id === 'ch' ? 'Schweiz' : id === 'at' ? '√ñsterreich' : null;
  if (p === 'position') return ['pg','sg','sf','pf','c'].includes(id) ? id.toUpperCase() : null;
  return null;
}

// Events
client.once('ready', () => console.log(`‚úÖ Eingeloggt als ${client.user.tag}`));

client.on('interactionCreate', async (i) => {
  try {
    // BUTTONS zuerst behandeln (damit sie nicht von den Command-Returns "verschluckt" werden)
    if (i.isButton()) {
      const roleName = mapCustomIdToRoleName(i.customId);
      if (!roleName) {
        // minimale, schnelle Antwort -> kein Timeout
        return i.reply({ content: 'Unbekannter Button.', flags: 64 /* ephemeral */ });
      }

      const role = i.guild.roles.cache.find(r => r.name === roleName);
      const member = i.member; // ohne GuildMembers-Intent

      if (!role) {
        return i.reply({ content: `Rolle **${roleName}** existiert nicht.`, flags: 64 });
      }

      const hasRole = member.roles.cache.has(role.id);
      if (hasRole) {
        await member.roles.remove(role);
        return i.reply({ content: `‚ùé Rolle **${roleName}** entfernt.`, flags: 64 });
      } else {
        await member.roles.add(role);
        return i.reply({ content: `‚úÖ Rolle **${roleName}** hinzugef√ºgt.`, flags: 64 });
      }
    }

    // Nur Slash-Commands ab hier
    if (!i.isChatInputCommand()) return;

    // -------- /setup2k --------
    if (i.commandName === 'setup2k') {
      try {
        await i.deferReply({ ephemeral: true });             // sofort best√§tigen
        await createStructure(i.guild);
        await i.editReply('‚úÖ Struktur fertig!');
      } catch (err) {
        console.error('setup2k error:', err);
        if (i.deferred || i.replied) {
          await i.editReply('‚ùå Fehler beim Erstellen der Struktur. Pr√ºfe meine Rechte (**Manage Channels**).');
        } else {
          await i.reply({ content: '‚ùå Fehler beim Erstellen der Struktur.', flags: 64 });
        }
      }
      return;
    }

    // -------- /setuproles --------
    if (i.commandName === 'setuproles') {
      try {
        await i.deferReply({ ephemeral: true });             // sofort best√§tigen

        const parent = await ensureCategory(i.guild, 'üì¢ Info & Regeln');
        const roleChannel = await ensureText(i.guild, 'üß©‚îÇrolle-zuweisen', parent);

        // Schreibrechte sicherstellen (hilft, falls Kategorie streng ist)
        const me = await i.guild.members.fetchMe();
        await roleChannel.permissionOverwrites.edit(i.guild.roles.everyone, { SendMessages: true }).catch(() => {});
        await roleChannel.permissionOverwrites.edit(me.roles.highest, { SendMessages: true, ManageChannels: true }).catch(() => {});

        await ensureRoles(i.guild);
        await postRoleMessage(roleChannel);

        await i.editReply('‚úÖ Rollen & Buttons sind bereit in **#üß©‚îÇrolle-zuweisen**.');
      } catch (err) {
        console.error('setuproles error:', err);
        const msg = (err?.code === 50013)
          ? '‚ùå Fehlende Berechtigungen. Gib mir **Manage Roles** & **Manage Channels** und setz meine Rolle **oberhalb** der zu vergebenden Rollen.'
          : '‚ùå Fehler beim Erstellen der Rollen/Buttons.';
        if (i.deferred || i.replied) {
          await i.editReply(msg);
        } else {
          await i.reply({ content: msg, flags: 64 });
        }
      }
      return;
    }
  } catch (err) {
    console.error('Fehler in interactionCreate:', err);
    try {
      if (i.deferred) {
        await i.editReply('‚ùå Unerwarteter Fehler.');
      } else if (!i.replied) {
        await i.reply({ content: '‚ùå Unerwarteter Fehler.', flags: 64 });
      }
    } catch {}
  }
});

    if (i.isButton()) {
      const roleName = mapCustomIdToRoleName(i.customId);
      if (!roleName) return i.reply({ content: 'Unbekannter Button.', ephemeral: true });
      const role = i.guild.roles.cache.find(r => r.name === roleName);
      const member = await i.guild.members.fetch(i.user.id);
      if (member.roles.cache.has(role.id)) {
        await member.roles.remove(role);
        await i.reply({ content: `‚ùé Rolle ${roleName} entfernt.`, ephemeral: true });
      } else {
        await member.roles.add(role);
        await i.reply({ content: `‚úÖ Rolle ${roleName} hinzugef√ºgt.`, ephemeral: true });
      }
    }
  } catch (err) {
    console.error('Fehler in interactionCreate:', err);
  }
});

client.login(TOKEN);
