import 'dotenv/config';
import { Client, GatewayIntentBits } from 'discord.js';

// === Token holen & s√§ubern ===
const rawToken = process.env.DISCORD_TOKEN ?? '';
const token = rawToken.trim();

// Token-Preview maskieren (nur f√ºr Log)
function mask(str, keep = 4) {
  if (!str) return '<leer>';
  if (str.length <= keep * 2) return str.replace(/./g, '‚Ä¢');
  return str.slice(0, keep) + '‚Ä¶' + str.slice(-keep);
}

const diagnostics = {
  gesetzt: !!rawToken,
  l√§nge: token.length,
  punktAnzahl: (token.match(/\./g) || []).length,
  hatLeerzeichen: /\s/.test(token),
  startetMitBot: token.startsWith('Bot '),
  vorschau: mask(token)
};

console.log('üîç TOKEN-DIAGNOSE:', diagnostics);

// === Validierungen ===
if (!diagnostics.gesetzt) {
  console.error('‚ùå Kein DISCORD_TOKEN gesetzt. In Railway unter Variables hinzuf√ºgen.');
  process.exit(1);
}
if (diagnostics.startetMitBot) {
  console.error('‚ùå Token darf NICHT mit "Bot " beginnen ‚Äì nur den reinen Token eintragen.');
  process.exit(1);
}
if (diagnostics.punktAnzahl !== 2) {
  console.error('‚ùå Falsches Token-Format ‚Äì es muss genau 2 Punkte haben (a.b.c).');
  process.exit(1);
}
if (diagnostics.hatLeerzeichen) {
  console.error('‚ùå Token enth√§lt Leerzeichen oder Zeilenumbr√ºche. Bitte ohne Extras eintragen.');
  process.exit(1);
}

// === Bot starten ===
const client = new Client({ intents: [GatewayIntentBits.Guilds] });

client.once('ready', () => {
  console.log(`‚úÖ Eingeloggt als ${client.user.tag}`);
});

client.login(token).catch(err => {
  console.error('‚ùå Login-Fehler:', err);
  process.exit(1);
});
